dependencies {
    implementation project(":common")
    implementation 'org.bstats:bstats-velocity:3.0.0'
    compileOnly "com.velocitypowered:velocity-api:3.0.0-SNAPSHOT"
    annotationProcessor "com.velocitypowered:velocity-api:3.0.0-SNAPSHOT"
    implementation "dev.dejvokep:boosted-yaml:1.3"
}

java {
    def targetJavaVersion = project.ext.targetJavaVersion
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = [
            'version': project.version
    ]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

rootProject.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)

shadowJar {

}